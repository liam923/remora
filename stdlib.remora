(define (+ [a int] [b int]) : int ...)
(define (- [a int] [b int]) : int ...)
(define (* [a int] [b int]) : int ...)
(define (/ [a int] [b int]) : int ...)

#|
Minimal basis:
 - map
 - reduce
 - scan
 - fold
 - trace
 - filter? - can be implemented in terms of scan and index
 - reshape
 - append
 - iota
 - index
 - reify-index - given a Dim index, returns that int. replaces length
 - subarray?
 - rotate?
 - transpose?
|#

(define (reduce{t | d-1 @item-pad @cell-shape}
          [f (-> ([t @cell-shape] [t @cell-shape]) [t @cell-shape])]
          [arr [t (+ d-1 1) @item-pad @cell-shape]])
  : [t @item-pad @cell-shape]
  ...)

(define (scan{t | d-1 @item-pad @cell-shape}
          [f (-> ([t @cell-shape] [t @cell-shape]) [t @cell-shape])]
          [a [t (+ d-1 1) @item-pad @cell-shape]])
  : [t (+ d-1 1) @item-pad @cell-shape]
  ...)

(define (length{t | d @cell-shape}
          [array [t d @cell-shape]])
  : int
  (reify-dimension d))

(define (filter{t | d @cell-shape}
          [array [t d @cell-shape]
          [flags [int d @cell-shape]])
  : (Sigma (d-out) [t d-out @cell-shape])
  (define total-keep (reduce-zero{int | d [] @cell-shape} + 0 flags))
  (define new-index (scan-zero{int | d [] @cell-shape} + 0 flags))
  ...)

(define (append{t | d1 d2 @cell-shape}
          [a [t d1 @cell-shape]]
          [b [t d2 @cell-shape]])
  : [t (+ d1 d2) @cell-shape]
  ...)
